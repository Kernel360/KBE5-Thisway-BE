plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id "com.avast.gradle.docker-compose" version "0.17.10"
    id 'com.google.cloud.tools.jib' version '3.4.5'
}

dockerCompose {
    useComposeFiles = ["${rootDir}/infra/dev/docker-compose.yml"]
    projectName     = "thisway"        // (선택) docker-compose project name
    buildBeforeUp = true            // 필요시 up 전에 build 실행
}

group = 'org'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral() }

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation("io.jsonwebtoken:jjwt:0.12.6")
    implementation("io.jsonwebtoken:jjwt-api:0.12.6")

    implementation("io.micrometer:micrometer-tracing")
    implementation("io.micrometer:micrometer-tracing-bridge-brave")

    /* for Rabbit MQ */
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly("io.jsonwebtoken:jjwt-impl:0.12.6")
    runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.12.6")

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jib {
  from {
    image = 'eclipse-temurin:21-jre'       // 베이스 JRE 이미지
  }
  to {
    // ECR URI: ACCOUNT_ID.dkr.ecr.REGION.amazonaws.com/REPO:TAG
    image = "${System.getenv('AWS_ACCOUNT_ID')}.dkr.ecr.ap-northeast-2.amazonaws.com/thisway/app:${project.version}"
  }
  container {
    mainClass = 'org.thisway.ThiswayApplication'  // 실제 메인 클래스 FQCN
    ports = ['8080']
    // 환경변수나 JVM 옵션도 여기에 지정 가능
    jvmFlags = ['-Xms256m', '-Xmx512m']
  }
}

tasks.named('test') {
    useJUnitPlatform()
}

def localGradle = file('build.local.gradle')

if (localGradle.exists()) {
    apply from: localGradle
}
